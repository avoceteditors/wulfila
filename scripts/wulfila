#!/usr/bin/env python3
##################################################################################
# Copyright (c) 2020, Kenneth P. J. Dyer <kenneth@avoceteditors.com>
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#
# * Redistributions of source code must retain the above copyright notice, this
#   list of conditions and the following disclaimer.
# * Redistributions in binary form must reproduce the above copyright notice,
#   this list of conditions and the following disclaimer in the documentation
#   and/or other materials provided with the distribution.
# * Neither the name of the copyright holder nor the name of its
#   contributors may be used to endorse or promote products derived from
#   this software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
# LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
# INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
# CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGE.
##################################################################################

# Module Imports
import argparse
import logging
import pathlib
from pkg_resources import get_distribution



############################ VERSION REPORT ##################################
prog = "wulfila"
def report_version(args):
    """Reports version and developer information to the command-line"""

    # Instantiate Variable
    byline = "Reference Utilities for Conlangers"
    author = "Kenneth P. J. Dyer <kenneth@avoceteditors.com>"
    comp = "Avocet Editorial Consulting"
    version_avocet = get_distribution("avocet").version
    version_dion = get_distribution("dion").version
    version_wulfila = get_distribution("wulfila").version

    # Build Verbose Output
    if args.verbose:

        content = [
            f"{prog.capitalize()} - {byline}", 
           author, 
            comp, 
            "Versions:",
            f"- Avocet Tools           v.{version_avocet}", 
            f"- Dion Text Processor    v.{version_dion}",
            f"- Wulfila Language Tools v.{version_wulfila}",
            "\n"]

    # Build Non-verbose Output
    else:
        content = [f"{prog} - version {version_wulfila}"]

    print("\n  ".join(content))


################################### ARGUMENT PARSER ##################################
# Init Parser
parser = argparse.ArgumentParser(
    prog=prog)
parser.set_defaults(func=report_version)

################### OPTIONS ##################
opts = parser.add_argument_group("Options")

# Working Directory
opts.add_argument(
    "-C", "--working-dir", default=".",
    help="Forces certain operations")

# Debug
opts.add_argument(
    "-D", "--debug", action="store_true",
    help="Enables debugging information in logging messages")

# Verbosity
opts.add_argument(
    "-v", "--verbose", action="store_true",
    help="Enables verbosity in logging messages")


#################### COMMANDS #################
cmds = parser.add_subparsers(title="Commands", help="Commands you want to execute")

# Version Command
cmd_ver = cmds.add_parser(
    "version",
    help="Reports version and developer information.")

args = parser.parse_args()

################## LOGGING CONFIGURATION ###########
log_format = "[%(levelname)s]: %(message)s"
log_level = logging.WARN

if args.debug:
    log_level = logging.DEBUG
    log_format = "[%(levelname)s]: %(message)s (%funcName)s in %(filename)s:%(lineno)d"
elif args.verbose:
    log_level = logging.INFO

logging.basicConfig(format=log_format, level=log_level)

# Configure Pathlib
args.working_dir = pathlib.Path(args.working_dir).resolve()

# Run Application
args.func(args)
